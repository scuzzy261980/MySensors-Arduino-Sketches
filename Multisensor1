/**
 * The MySensors Arduino library handles the wireless radio link and protocol
 * between your home built sensors/actuators and HA controller of choice.
 * The sensors forms a self healing radio network with optional repeaters. Each
 * repeater and gateway builds a routing tables in EEPROM which keeps track of the
 * network topology allowing messages to be routed to nodes.
 *
 * Created by Henrik Ekblad <henrik.ekblad@mysensors.org>
 * Copyright (C) 2013-2015 Sensnology AB
 * Full contributor list: https://github.com/mysensors/Arduino/graphs/contributors
 *
 * Documentation: http://www.mysensors.org
 * Support Forum: http://forum.mysensors.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 *
 *******************************
 *
 * REVISION HISTORY
 * Version 1.0 - Henrik Ekblad
 * 
 * DESCRIPTION 
 * Example sketch showing how to request time from controller which is stored in RTC module
 * The time and temperature (DS3231/DS3232) is shown on an attached Crystal LCD display
 * 
 * Version 1.1 - Simon Curry
 * //added Support for DHT11/22, also an LDR for light level and multi-relay-with-button-actuator(finalized by jeylites, code available 
 * //@http://forum.mysensors.org/topic/1299/array-relay-with-button-actuator
 * Wiring (radio wiring on www.mysensors.org)
 * ------------------------------------
 * Arduino   RTC-Module     I2C Display
 * ------------------------------------
 * GND       GND            GND
 * +5V       VCC            VCC
 * A4        SDA            SDA
 * A5        SCL            SCL
 *
 * http://www.mysensors.org/build/display
 *
 */
#include <Bounce2.h>
#define RELAY_ON 0                      // switch around for realy HIGH/LOW state
#define RELAY_OFF 1
#include <MyConfig.h>
#include <SPI.h>
#include <MySensor.h>
#include <Time.h>
#include <DS3232RTC.h>  // A  DS3231/DS3232 library
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <DHT.h>
#define dht_pin 8//define your DHT_PIN
#define CHILD_ID_HUM 5//define sensor ID`s
#define CHILD_ID_TEMP 6
#define CHILD_ID_LIGHT 7
#define LDR_Pin A1//define LDR analog pin
#define NODE_ID 6//change to suit or remove and add NULL, AUTO to gw.begin() and remove NODE_ID
#define noRelays 2//define number of relays
const int relayPin[] = {3, 6};         //  switch around pins to your desire
const int buttonPin[] = {4, 5};     //  switch around pins to your desire

class Relay             // relay class, store all relevant data (equivalent to struct)
{
  public:
    int buttonPin;                   // physical pin number of button
    int relayPin;             // physical pin number of relay
    byte oldValue;                    // last Values for key (debounce)
    boolean relayState;               // relay status (also stored in EEPROM)
};

Relay Relays[noRelays];
Bounce debouncer[noRelays];


MySensor gw;


//Define variables here
float lastTemp;
float lastHum;
boolean metric = true;
int lastLightLevel;
boolean timeReceived = false;
unsigned long lastUpdate = 0, lastRequest = 0;

//Define messages
MyMessage msg[noRelays];
MyMessage msgLight(CHILD_ID_LIGHT, V_LIGHT_LEVEL);
MyMessage msgHum(CHILD_ID_HUM, V_HUM);
MyMessage msgTemp(CHILD_ID_TEMP, V_TEMP);

DHT dht; //create DHT instance
// Initialize display. Google the correct settings for your display.
// The follwoing setting should work for the recommended display in the MySensors "shop".
LiquidCrystal_I2C lcd(0x20, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);

void setup()
{
  gw.begin(incomingMessage, NODE_ID, false, 0);
  dht.setup(dht_pin);
  // Send the sketch version information to the gateway and Controller
  gw.sendSketchInfo("RTC Clock with Relays", "1.0");
  // Register all sensors to gw (they will be created as child devices)
  gw.present(CHILD_ID_HUM, S_HUM);
  gw.present(CHILD_ID_TEMP, S_TEMP);
  gw.present(CHILD_ID_LIGHT, S_LIGHT_LEVEL);
  // the function to get the time from the RTC
  setSyncProvider(RTC.get);

  // Request latest time from controller at startup
  gw.requestTime(receiveTime);

  // initialize the lcd for 16 chars 2 lines and turn on backlight
  lcd.begin(20, 4);
  lcd.setCursor(1, 0);
  lcd.clear();
  lcd.print("RTC Display Sensor");
  lcd.setCursor(1, 1);
  lcd.print("With DHT22 and....");
  lcd.setCursor(1, 2);
  lcd.print(" multi-relay with");
  lcd.setCursor(4, 3);
  lcd.print("Button Actuator");
  delay(5000);
  lcd.clear();
  // Initialize Relays with corresponding buttons
  for (int i = 0; i < noRelays; i++) {
    Relays[i].buttonPin = buttonPin[i];              // assign physical pins
    Relays[i].relayPin = relayPin[i];
    msg[i].sensor = i;                                   // initialize messages
    msg[i].type = V_LIGHT;
    debouncer[i] = Bounce();                        // initialize debouncer
    debouncer[i].attach(buttonPin[i]);
    debouncer[i].interval(5);
    pinMode(Relays[i].buttonPin, INPUT_PULLUP);
    pinMode(Relays[i].relayPin, OUTPUT);
    Relays[i].relayState = gw.loadState(i);                               // retrieve last values from EEPROM
    digitalWrite(Relays[i].relayPin, Relays[i].relayState ? RELAY_ON : RELAY_OFF); // and set relays accordingly
    gw.send(msg[i].set(Relays[i].relayState ? true : false));                 // make controller aware of last status
    gw.present(i, S_LIGHT);                               // present sensor to gateway
    delay(250);

  }
}

// This is called when a new time value was received
void receiveTime(unsigned long controllerTime) {
  // Ok, set incoming time
  Serial.print("Time value received: ");
  Serial.println(controllerTime);
  RTC.set(controllerTime); // this sets the RTC to the time from controller - which we do want periodically
  timeReceived = true;
}

void loop()
{


  for (byte i = 0; i < noRelays; i++) {
    debouncer[i].update();
    byte value = debouncer[i].read();
    if (value != Relays[i].oldValue && value == 0) {
      Relays[i].relayState = !Relays[i].relayState;
      digitalWrite(Relays[i].relayPin, Relays[i].relayState ? RELAY_ON : RELAY_OFF);
      gw.send(msg[i].set(Relays[i].relayState ? true : false));
      gw.saveState( i, Relays[i].relayState );
    }                 // save sensor state in EEPROM (location == sensor number)

    Relays[i].oldValue = value;

    //This controls the "Lights On/Off LCD message

    boolean lightsOn = digitalRead(relayPin[i]) == HIGH;
    if (boolean(lightsOn == HIGH))
    {

      lcd.setCursor(2, 1);
      lcd.print("LIGHTS ARE ON!!!");
    } else if (boolean(lightsOn == LOW)) {

      lcd.setCursor(2, 1);
      lcd.print("LIGHTS ARE OFF!!");

    }
  }



  float temperature = dht.getTemperature();
  if (isnan(temperature)) {
    Serial.println("Failed reading temperature from DHT");
  } else if (temperature != lastTemp) {
    lastTemp = temperature;
    if (!metric) {
      temperature = dht.toFahrenheit(temperature);
    }
    gw.send(msgTemp.set(temperature, 1));
    Serial.print("T: ");
    Serial.println(temperature);
  }

  float humidity = dht.getHumidity();
  if (isnan(humidity)) {
    Serial.println("Failed reading humidity from DHT");
  } else if (humidity != lastHum) {
    lastHum = humidity;
    gw.send(msgHum.set(humidity, 1));
    Serial.print("H: ");
    Serial.println(humidity);
  }
  int lightLevel = (1023 - analogRead(LDR_Pin));
  Serial.println(lightLevel);
  if (lightLevel != lastLightLevel) {
    gw.send(msgLight.set(lightLevel));
    lastLightLevel = lightLevel;
  }
  delay(2000);

unsigned long now = millis();
  gw.process();

  // If no time has been received yet, request it every 10 second from controller
  // When time has been received, request update every hour
  if ((!timeReceived && (now - lastRequest) > (10UL * 1000UL))
      || (timeReceived && (now - lastRequest) > (60UL * 1000UL * 60UL))) {
    // Request time from controller.
    Serial.println("requesting time");
    gw.requestTime(receiveTime);
    lastRequest = now;
  }

  // Update display every second
  if (now - lastUpdate > 1000) {
    updateDisplay();
    lastUpdate = now;
  }
}


void updateDisplay() {
  tmElements_t tm;
  RTC.read(tm);

  float h = dht.getHumidity();
  float t = dht.getTemperature();
  // Print date and time
  lcd.setCursor(4, 0);
  lcd.print(tm.Day);
  lcd.print("/");
  lcd.print(tm.Month);
  //  lcd.print(" ");
  //  lcd.print(tmYearToCalendar(tm.Year)-2000);

  lcd.print(" ");
  printDigits(tm.Hour);
  lcd.print(":");
  printDigits(tm.Minute);
  lcd.print(":");
  printDigits(tm.Second);

  // Go to next line and print temperature
  // lcd.setCursor ( 7, 1 );
  // lcd.print("Lounge ");
  //lcd.print(RTC.temperature()/4);
  // lcd.write(223); // Degree-sign
  //lcd.print("C");

  //Print temp/hum on next two lines
  lcd.setCursor(5, 2);
  // print from 0 to 9:

  lcd.print("Temp:");
  lcd.print(t);
  lcd.print("C");
  // set the cursor to (16,1):
  lcd.setCursor(3, 3);
  lcd.print("Humidity: ");
  lcd.print(h);
  lcd.print("%");
}


void printDigits(int digits) {
  if (digits < 10)
    lcd.print('0');
  lcd.print(digits);
}

// process incoming message
void incomingMessage(const MyMessage &message) {

  if (message.type == V_LIGHT) {
    if (message.sensor < noRelays) {          // check if message is valid for relays..... previous line  [[[ if (message.sensor <=noRelays){ ]]]
      Relays[message.sensor].relayState = message.getBool();
      digitalWrite(Relays[message.sensor].relayPin, Relays[message.sensor].relayState ? RELAY_ON : RELAY_OFF); // and set relays accordingly
      gw.saveState( message.sensor, Relays[message.sensor].relayState ); // save sensor state in EEPROM (location == sensor number)
    }
  }
}
